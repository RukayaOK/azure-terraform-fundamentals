name: terraform ci

on:
  pull_request:
    branches: [main]
    paths:
      - "**.tf"
  push: 
    branches: [main]
    paths:
      - "**.tf"
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }} 
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }} 
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }} 
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }} 

jobs:

  static-check:
    name: static-check
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      
      - uses: reviewdog/action-staticcheck@v1
      
      - uses: reviewdog/action-setup@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-check
          fail_on_error: 'true'

  terraform-docs:
    name: terraform-docs 
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: terraform docs
        uses: terraform-docs/gh-actions@v0.9.0
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: "true"

  terraform-validate:
    name: terraform-validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TERRAFORM_WORKSPACE_DIR:
          - terraform/main/resources/IT
          - terraform/main/resources/Sales
        include:
          - TERRAFORM_WORKSPACE_DIR: terraform/main/resources/IT
            ARM_ACCESS_KEY: IT_ARM_ACCESS_KEY
          - TERRAFORM_WORKSPACE_DIR: terraform/main/resources/Sales
            ARM_ACCESS_KEY: SALES_ARM_ACCESS_KEY

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          terraform_wrapper: false
      
      - name: Terraform Validate 
        id: validate
        run: |
          make init-fmt-validate
        env:
          TERRAFORM_WORKSPACE_DIR: ${{ matrix.TERRAFORM_WORKSPACE_DIR }}
          ARM_ACCESS_KEY: ${{ secrets[matrix.ARM_ACCESS_KEY] }}

      - name: Comment Results on PR
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outputs.stdout || steps.validate.outputs.stderr }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-plan:
    name: terraform-plan
    needs:
      - terraform-plan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TERRAFORM_WORKSPACE_DIR:
          - terraform/main/resources/IT
          - terraform/main/resources/Sales
        include:
          - TERRAFORM_WORKSPACE_DIR: terraform/main/resources/IT
            ARM_ACCESS_KEY: IT_ARM_ACCESS_KEY
          - TERRAFORM_WORKSPACE_DIR: terraform/main/resources/Sales
            ARM_ACCESS_KEY: SALES_ARM_ACCESS_KEY

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          terraform_wrapper: false
      
      - name: Terraform Plan 
        id: plan
        continue-on-error: true
        run: |
          make plan-apply
        env:
          TERRAFORM_WORKSPACE_DIR: ${{ matrix.TERRAFORM_WORKSPACE_DIR }}
          ARM_ACCESS_KEY: ${{ secrets[matrix.ARM_ACCESS_KEY] }}

      - name: Terraform Show
        id: show
        continue-on-error: true
        run: | 
          cd ${{ matrix.path }}
          terraform show -no-color tfplan 2>&1 > /tmp/plan.txt

      - name: Comment on PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ inputs.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
    
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }} 
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: "[Your Subscription ID]"
          ARM_TENANT_ID: "[Your Tenant ID]"
        working-directory: ./staging # Use your environment folder
        shell: bash